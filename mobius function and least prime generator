//manish kumar patel
#include<bits/stdc++.h>
using namespace std;



#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repb(i,a,b) for(ll i=a;i>=b;i--)
#define err() cout<<"--------------------------"<<endl; 
#define errA(A) for(auto i:A)   cout<<i<<" ";cout<<endl;
#define err1(a) cout<<#a<<" "<<a<<endl



#define err2(a,b) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<endl
#define err3(a,b,c) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<" "<<#c<<" "<<c<<endl
#define err4(a,b,c,d) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<" "<<#c<<" "<<c<<" "<<#d<<" "<<d<<endl
#define pb push_back
#define all(A)  A.begin(),A.end()
#define allr(A)    A.rbegin(),A.rend()
#define ft first
#define sd second

#define pii pair<int,int>
#define pll pair<ll,ll>
#define V vector<ll>
#define S set<ll>
#define VV vector<V>
#define Vpll vector<pll>
 
#define endl "\n"

// this function calculates least prime factor for each i
V least_prime_generator(ll a)
{
    V v(a,0);
    rep(i,2,a)
    {
        if(!v[i])
        {
            for(ll j=i;j<a;j+=i)
            {
                if(!v[j])
                {
                    v[j]=i;
                }
            }
        }
    }
    return v;
}

// mobius function generator
V mobius (ll a,V &lpf)
{
    V v(a,0);
    v[1]=1;
    rep(i,2,a)
    {
        if(lpf[i/lpf[i]]==lpf[i])
        {
            v[i]=0;
        }
        else
        {
            v[i]=(-1)*(v[i/lpf[i]]);
        }
    }
    return v;
}


int main()
    {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL); cout.tie(NULL);
        #ifndef ONLINE_JUDGE
         clock_t tStart = clock();
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
        #endif
        int t;
        // cin>>t;
        t=1;
           
        while(t--)
        {
            V v=least_prime_generator(50);
            V vv=mobius(50,v);
            errA(vv);

        }
        #ifndef ONLINE_JUDGE
            printf("\nRun Time -> %.10fs\n", (double)(clock()-tStart) / CLOCKS_PER_SEC);
            #endif
} 

